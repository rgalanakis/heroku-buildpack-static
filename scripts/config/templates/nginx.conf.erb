daemon off;
worker_processes auto;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= worker_connections %>;
}

http {
  gzip on;
  gzip_comp_level 6;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any;

  server_tokens off;

<% if logging['access'] %>
  access_log logs/access.log;
<% else %>
  access_log off;
<% end %>

<% if debug %>
  error_log stderr debug;
  rewrite_log on;
<% else %>
  error_log stderr <%= logging['error'] %>;
<% end %>

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  #Must read the body in 5 seconds.
  client_body_timeout 5;

  server {
    listen <%= port %> reuseport;
    server_name <%= ENV['HOSTNAME'] || (ENV.fetch('HEROKU_APP_NAME', 'unknown') + '.herokuapp.com') %>

    charset <%= encoding %>;
    port_in_redirect off;
    keepalive_timeout 5;
    root <%= root %>;

    set $is_prerender_ua 0;
    if ($http_user_agent ~ "Prerender") {
      set $is_prerender_ua 1;
    }

    <% if https_only %>
    set $redirect_to_https Y;
    if ($is_prerender_ua != 1) {
      set $redirect_to_https "${redirect_to_https}Y";
    }
    if ($http_x_forwarded_proto != "https") {
      set $redirect_to_https "${redirect_to_https}Y";
    }
    if ($redirect_to_https = YYY) {
      return 301 https://$host$request_uri;
    }
    <% end %>

    location / {
      mruby_post_read_handler /app/bin/config/lib/ngx_mruby/headers.rb cache;
      try_files $uri @prerender;
    }

    location /coming-soon {
      return 302 https://$host/shop;
    }

    location @prerender {
      proxy_set_header X-Prerender-Token <%= ENV['PRERENDER_TOKEN'] %>;

      set $prerender 0;
      if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
          set $prerender 1;
      }
      if ($args ~ "_escaped_fragment_") {
          set $prerender 1;
      }
      if ($is_prerender_ua) {
          set $prerender 0;
      }
      if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
          set $prerender 0;
      }

      #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
      resolver 8.8.8.8;

      if ($prerender = 1) {
          #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
          set $prerender "service.prerender.io";
          rewrite .* /$scheme://$host$request_uri? break;
          proxy_pass http://$prerender;
      }
      if ($prerender = 0) {
        rewrite .* /index.html break;
      }
    }
  }
}
